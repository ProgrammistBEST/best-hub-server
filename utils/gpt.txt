const { createArticle } = require(path.join(__dirname, './articleCRUD'))
const { createSize } = require(path.join(__dirname, './sizeCRUD'))
async function checkDuplicate(table, fields, options = {}) {
    try {
        ensureDatabaseConnection(db);
        const { excludeField, excludeValue } = options;

        // Формируем SQL-запрос
        const keys = Object.keys(fields);
        const values = Object.values(fields);

        let query = `SELECT * FROM ${table} WHERE `;
        query += keys.map((key) => `${key} = ?`).join(' AND ');

        if (excludeField && excludeValue) {
            query += ` AND ${excludeField} != ?`;
            values.push(excludeValue);
        }

        const [rows] = await db.query(query, values);
        return rows.length > 0 ? rows[0] : null;
    } catch (error) {
        console.error('Ошибка при проверке дубликата:', error.message);
        throw error;
    }
}

async function checkForDuplicateExternalArticle(platform, externalArticle, excludeId = null) {
    try {
        ensureDatabaseConnection(db);

        if (!externalArticle || typeof externalArticle !== 'string' || externalArticle.trim() === '') {
            throw new Error('Некорректное значение externalArticle');
        }
        if (!platform || typeof platform !== 'string' || platform.trim() === '') {
            throw new Error('Некорректное значение platform');
        }

        const query = excludeId
            ? `
                SELECT e.article_id FROM external_articles e
                JOIN platforms p ON e.platform_id = p.platform_id 
                WHERE p.platform = ? AND e.external_article = ? AND e.external_article_id != ?
            `
            : `
                SELECT e.article_id FROM external_articles e
                JOIN platforms p ON e.platform_id = p.platform_id
                WHERE p.platform = ? AND e.external_article = ?
            `;

        const params = excludeId
            ? [platform, externalArticle, excludeId]
            : [platform, externalArticle];

        const [rows] = await db.query(query, params);
        return rows.length > 0 ? rows[0].article_id : null;
    } catch (error) {
        console.error('Ошибка при проверке дубликата внешнего артикула:', error.message);
        throw error;
    }
}
// Создание новой модели с заданными параметрами
async function createModel(brand, article, size, sku, pair = 20, category = null, gender = null, color = null, compound = null, platform) {
    try {
        ensureDatabaseConnection(db);

        // Шаг 1: Проверка существования SKU
        const existingSKU = await checkDuplicate('models', { sku });
        if (existingSKU) {
            throw new Error('SKU уже существует. Дубликаты запрещены.');
        }

        // Шаг 2: Проверка и получение brand_id
        const brandId = await checkDuplicate('brands', { brand });
        if (!brandId) {
            throw new Error(`Бренд "${brand}" не найден в базе данных.`);
        }

        // Шаг 3: Проверка и получение platform_id
        const platformId = await checkDuplicate('platforms', { platform });
        if (!platformId) {
            throw new Error(`Платформа "${platform}" не найдена в базе данных.`);
        }

        // Шаг 4: Проверка наличия артикула
        const articleRecord = await checkDuplicate('articles', { article });
        let articleId;
        if (!articleRecord || articleRecord === 0) {
            await createArticle(article);
            const newArticleRecord = await checkDuplicate('articles', { article });
            articleId = newArticleRecord.article_id;
        } else {
            articleId = articleRecord.article_id;
        }

        // Шаг 5: Проверка наличия размера
        const sizeRecord = await checkDuplicate('sizes', { size });
        let sizeId;
        if (!sizeRecord || sizeRecord === 0) {
            await createSize(size);
            const newSizeRecord = await checkDuplicate('sizes', { size });
            sizeId = newSizeRecord.size_id;
        } else {
            sizeId = sizeRecord.size_id;
        }

        // Шаг 6: Вставка новой модели
        await db.execute(
            `
            INSERT INTO models (
                brand_id,
                platform_id,
                article_id,
                size_id,
                sku,
                pair,
                category,
                gender,
                color,
                compound
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `,
            [
                brandId,
                platformId,
                articleId,
                sizeId,
                sku,
                pair,
                category,
                gender,
                color,
                compound
            ]
        );

        console.log('Модель успешно создана.');
    } catch (error) {
        console.error('Ошибка при создании модели:', error.message);
        throw error;
    }
}
async function handleExternalArticle(connection, article, platform) {
    try {
        if (!article || typeof article !== 'string' || article.trim() === '') {
            throw new Error('Некорректное значение article');
        }
        if (!platform || typeof platform !== 'string' || platform.trim() === '') {
            throw new Error('Некорректное значение platform');
        }

        // Проверка на дубликат external_article
        const externalArticle = await checkForDuplicateExternalArticle(platform, article);
        if (externalArticle) {
            return externalArticle; // Возвращаем article_id
        }

        // Проверка или создание базового артикула
        const articleRecord = await checkDuplicate('articles', { article });
        let articleId;
        if (articleRecord) {
            articleId = articleRecord.article_id;
        } else {
            await createArticle(article);
            const newArticleRecord = await checkDuplicate('articles', { article });
            articleId = newArticleRecord.article_id;
        }

        // Получаем platform_id по имени платформы
        const [platformRows] = await connection.execute(
            `SELECT platform_id FROM platforms WHERE platform = ?`,
            [platform]
        );

        if (platformRows.length === 0) {
            throw new Error(`Платформа "${platform}" не найдена`);
        }

        const platformId = platformRows[0].platform_id;

        // Вставка или обновление external_articles
        await connection.execute(
            `
            INSERT INTO external_articles (article_id, external_article, platform_id)
            VALUES (?, ?, ?)
            ON DUPLICATE KEY UPDATE article_id = VALUES(article_id)
            `,
            [articleId, article, platformId]
        );

        // Получаем article_id из external_articles
        const [rows] = await connection.execute(
            `SELECT article_id FROM external_articles WHERE platform_id = ? AND external_article = ?`,
            [platformId, article]
        );
        return rows[0].article_id;
    } catch (error) {
        console.error('Ошибка при обработке внешнего артикула:', error.message);
        throw error;
    }
}
async function createModelsWithWB(data, brand, platform) {
    let connection;
    try {
        connection = await db.getConnection();
        await connection.beginTransaction();

        for (const item of data) {
            const { article, gender, compound, color, sizes, categories } = item;

            if (!article || !gender || !categories || !Array.isArray(sizes)) {
                console.warn(`Пропущена запись: недостаточно данных для article=${article}`);
                continue;
            }

            const safeCompound = compound || null;
            const safeColor = color || null;
            const safeCategories = categories || null;

            // Получаем правильный article_id через маппинг WB → Честный знак
            let articleId;
            try {
                articleId = await handleExternalArticle(connection, article, platform);
            } catch (err) {
                console.error(`Не удалось обработать артикул "${article}"`, err.message);
                continue;
            }

            for (const { techSize, sku } of sizes) {
                if (await checkDuplicate('models', { sku })) {
                    console.warn(`SKU "${sku}" уже существует. Пропускаем.`);
                    continue;
                }

                try {
                    await createModel(
                        brand,
                        articleId,
                        techSize,
                        sku,
                        20,
                        safeCategories,
                        gender,
                        safeColor,
                        safeCompound,
                        platform
                    );
                    console.log(`Модель с SKU "${sku}" успешно создана.`);
                } catch (err) {
                    console.error(`Ошибка при создании модели SKU "${sku}":`, err.message);
                }
            }
        }

        await connection.commit();
        console.log("Все модели успешно обработаны.");
    } catch (error) {
        if (connection) await connection.rollback();
        console.error("Ошибка транзакции:", error.message);
        throw error;
    } finally {
        if (connection) connection.release();
    }
}
// Функция создания размеров
async function createSize(size) {
    try {
        ensureDatabaseConnection(db);
        await db.execute(`
            INSERT INTO sizes SET size = ?
            ON DUPLICATE KEY UPDATE size = size`, 
            [size, size])
    } catch (error) {
        console.error('Не удалось создать размер:', error.message);
        throw error;
    }
}
// Функция создания артикулов
async function createArticle(newArticleName) {
    try {
        ensureDatabaseConnection(db);

        // Проверка на пустое значение
        if (!newArticleName || typeof newArticleName !== 'string' || newArticleName.trim() === '') {
            throw new Error('Некорректное имя артикула');
        }

        // Проверка на дубликат
        const [existing] = await db.query(`
            SELECT article_id FROM articles
            WHERE article = ?
        `, [newArticleName]);

        if (existing.length > 0) {
            throw new Error('Артикул уже существует');
        }

        // Вставка нового артикула
        await db.execute(`
            INSERT INTO articles (article)
            VALUES (?)
        `, [newArticleName]);
    } catch (error) {
        console.error('Ошибка при создании артикула:', error.message);
        throw error; // Передаем ошибку дальше
    }
}
